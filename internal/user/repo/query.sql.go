// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repo

import (
	"context"
)

const checkUserBaseExists = `-- name: CheckUserBaseExists :one
SELECT COUNT(*)
FROM "user"."user_base"
WHERE "user_email" = $1
`

func (q *Queries) CheckUserBaseExists(ctx context.Context, userEmail string) (int64, error) {
	row := q.db.QueryRow(ctx, checkUserBaseExists, userEmail)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUserVerify = `-- name: CreateUserVerify :one
INSERT INTO "user"."user_verify" (
    "verify_otp",
    "verify_key",
    "verify_key_hash"
) VALUES ($1, $2, $3) RETURNING verify_id, verify_otp, verify_key, verify_key_hash, is_verified, is_deleted, verify_created_at, verify_updated_at
`

type CreateUserVerifyParams struct {
	VerifyOtp     string `json:"verify_otp"`
	VerifyKey     string `json:"verify_key"`
	VerifyKeyHash string `json:"verify_key_hash"`
}

func (q *Queries) CreateUserVerify(ctx context.Context, arg CreateUserVerifyParams) (UserUserVerify, error) {
	row := q.db.QueryRow(ctx, createUserVerify, arg.VerifyOtp, arg.VerifyKey, arg.VerifyKeyHash)
	var i UserUserVerify
	err := row.Scan(
		&i.VerifyID,
		&i.VerifyOtp,
		&i.VerifyKey,
		&i.VerifyKeyHash,
		&i.IsVerified,
		&i.IsDeleted,
		&i.VerifyCreatedAt,
		&i.VerifyUpdatedAt,
	)
	return i, err
}
