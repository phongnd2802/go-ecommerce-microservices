// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/phongnd2802/go-ecommerce-microservices/internal/user/repo"
	"github.com/phongnd2802/go-ecommerce-microservices/internal/user/services/impl"
	"github.com/phongnd2802/go-ecommerce-microservices/internal/user/worker"
	"github.com/phongnd2802/go-ecommerce-microservices/pkg/cache"
	"github.com/phongnd2802/go-ecommerce-microservices/pkg/email"
	"github.com/phongnd2802/go-ecommerce-microservices/pkg/postgres"
	"github.com/phongnd2802/go-ecommerce-microservices/pkg/settings"
)

// Injectors from wire.go:

func InitServer(postgresSetting settings.PostgresSetting, redisSetting settings.RedisSetting) (*Server, error) {
	pool, err := newDBEngine(postgresSetting)
	if err != nil {
		return nil, err
	}
	store := repo.NewStore(pool)
	cacheCache := cache.NewRedisCache(redisSetting)
	taskDistributor := worker.NewRedisTaskDistributor(redisSetting)
	userAuth := impl.NewUserAuth(store, cacheCache, taskDistributor)
	server := NewServer(userAuth)
	return server, nil
}

func InitTaskProcessor(redisSettings settings.RedisSetting, emailSetting settings.EmailSetting) (worker.TaskProcessor, error) {
	emailSender := email.NewGmailSender(emailSetting)
	taskProcessor := worker.NewRedisTaskProcessor(redisSettings, emailSender)
	return taskProcessor, nil
}

// wire.go:

func newDBEngine(cfg settings.PostgresSetting) (*pgxpool.Pool, error) {
	db, err := postgres.NewPostgresDB(cfg)
	if err != nil {
		return nil, err
	}
	return db.GetDB(), nil
}
